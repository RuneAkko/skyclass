package com.android.publiccourse;import java.lang.ref.SoftReference;import java.lang.reflect.Array;import java.util.HashMap;import java.util.Set;import android.graphics.Bitmap;public class OBSoftReference {	// private static OBSoftReference mSoftRefrences;	private HashMap<String, SoftReference<Bitmap>> mSoftBitmap = null;	public OBSoftReference() {		// TODO Auto-generated constructor stub		mSoftBitmap = new HashMap<String, SoftReference<Bitmap>>();	}	// private OBSoftReference() {	// mSoftBitmap = new HashMap<String, SoftReference<Bitmap>>();	// }	// public static OBSoftReference getInstance() {	//	// if (mSoftRefrences == null) {	// mSoftRefrences = new OBSoftReference();	// }	// return mSoftRefrences;	// }	/**	 * 	 * @param key	 * @param bitmap	 */	public void addBitmapSoftReference(String key, Bitmap bitmap) {		SoftReference<Bitmap> value = new SoftReference<Bitmap>(bitmap);		mSoftBitmap.put(key, value);	}	/**	 * 	 * @param keyx	 * @return	 */	public Bitmap getBitmapSoftReference(String keyx) {		SoftReference<Bitmap> value = mSoftBitmap.get(keyx);		if (value != null) {			Bitmap bitmap = value.get();			if (bitmap != null && !bitmap.isRecycled()) {				return bitmap;			}		}		return null;	}	/**	 * 	 * @param keyx	 * @return	 */	public void recycleSoftReferenceBitmap(String keyx) {		SoftReference<Bitmap> value = mSoftBitmap.get(keyx);		if (value != null) {			Bitmap bitmap = value.get();			if (bitmap != null && !bitmap.isRecycled()) {				bitmap.recycle();				bitmap = null;				mSoftBitmap.remove(keyx);			}		}	}	/**	 * 	 * @param keyx	 * @return	 */	public void clearSoftReferenceBitmap() {		Set set = mSoftBitmap.keySet();		Object[] array = set.toArray();		for (int i = 0; i < array.length; i++) {			Bitmap bitmap = mSoftBitmap.get(array[i]).get();			if (bitmap != null && !bitmap.isRecycled()) {				bitmap.recycle();				bitmap = null;			}		}		mSoftBitmap.clear();	}}